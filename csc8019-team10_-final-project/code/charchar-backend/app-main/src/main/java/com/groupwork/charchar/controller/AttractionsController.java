package com.groupwork.charchar.controller;

import com.google.maps.errors.ApiException;
import com.groupwork.charchar.dao.AttractionsDao;
import com.groupwork.charchar.entity.AttractionsEntity;
import com.groupwork.charchar.service.AttractionsService;
import com.groupwork.charchar.vo.AttractionDetailVO;
import com.groupwork.charchar.vo.UpdateAttractionRatingVO;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author Jiahe "Tony" & Yilong Wang
 * @email 571379772@qq.com
 * @date 2023-03-24 15:33:03
 * &&Notice: place_ID will be referred to the unique ID provided by Google
 * attractionId will be referred to the unique ID autogenerated together with Attraction Entities
 */
@RestController
@CrossOrigin(origins = "*")
@RequestMapping("charchar/attractions")
public class AttractionsController {
    @Autowired
    private AttractionsService attractionsService;
    @Autowired
    private AttractionsDao attractionsDao;

    /**
     * Save a list of Attraction Entities
     * Acquiring Attractions place_Id by using Coordinates
     *
     * @param lat
     * @param lng
     * @param rad
     * @throws JSONException
     * @throws IOException
     */
    @PostMapping("/save/AttractionList/{latitude}/{longitude}/{radius}")
    public void saveAttractionsList(@PathVariable("latitude") double lat,
                                    @PathVariable("longitude") double lng,
                                    @PathVariable("radius") double rad) throws JSONException, IOException {
        List<AttractionsEntity> tempattractionList = attractionsService.saveNearByAttraction(lat, lng, rad);
        for (AttractionsEntity a : tempattractionList) {
            boolean exists = attractionsService.checkPlaceIdExists(a.getPlaceId());
            if (!exists) {
                attractionsService.save(a);
            }
        }
    }

    /**
     * Return NearBy Attractions
     * Given User's Current Coordinate and Search Radius, Return A List Of AttractionEntities
     *
     * @param latitude
     * @param longitude
     * @param radius
     * @return
     * @throws IOException
     * @throws JSONException
     */
    @GetMapping("/near/location/{latitude}/{longitude}/{radius}")
    //need users' lat and lng coord as double, and radius as double in (M)
    public List<AttractionDetailVO> getNearByLocation(@PathVariable("latitude") double latitude,
                                                      @PathVariable("longitude") double longitude,
                                                      @PathVariable("radius") double radius) throws IOException, JSONException {
        List<AttractionDetailVO> attractionDetailVOList = attractionsService.getNearByLocation(latitude, longitude, radius);
        return attractionDetailVOList;
    }


    /**
     * Updating Rating For an Attraction
     * Based attractionID
     *
     * @param attractionId
     * @return
     */
    @PostMapping("/update/rating/{attractionId}")
    public UpdateAttractionRatingVO updateAttractionRating(
            @PathVariable Integer attractionId) {
        UpdateAttractionRatingVO updateEntity = attractionsService.updateAttractionRating(attractionId);
        return updateEntity;
    }

    /**
     * Fetch Stored Attraction Information
     *
     * @param placeId
     * @return
     */
    @GetMapping("/findAttractionByID/{placeId}")
    public @ResponseBody AttractionsEntity getById(
            @PathVariable String placeId) {
        AttractionsEntity attractionsEntity = attractionsDao.getAttractionByPlaceId(placeId);
        return attractionsEntity;
    }

    /**
     * Filter A List Of Attraction By Opening Status
     * This Method Requests Information From Google,
     * So All Attractions Are Provided in place_Id String From.
     *
     * @param attractionsGoogleIDs
     * @return
     * @throws IOException
     * @throws InterruptedException
     * @throws ApiException
     * @throws JSONException
     */
    @GetMapping("/filterOpenAttractionsMK2")
    public @ResponseBody List<String> getAttractionByOpeningStatus(
            @RequestBody List<String> attractionsGoogleIDs)
            throws IOException, InterruptedException, ApiException, JSONException {

        LocalDate today = LocalDate.now();
        List<String> filteredAttractionsGoogleID = new ArrayList<>();

        for (String a : attractionsGoogleIDs) {


            int openingStatus = attractionsService.getCurrentOpeningStatus(a);
            if (openingStatus != 0) {
                filteredAttractionsGoogleID.add(a);
            }
        }
        return filteredAttractionsGoogleID;
    }

    /**
     * Sort Attractions Base on Ratings
     * From the Most to the Least
     * Information Fetched From Google
     *
     * @param attractionsGoogleIDs
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/sortAttractionByRating/")
    public @ResponseBody List<String> sortAttractionsByRating(
            @RequestBody List<String> attractionsGoogleIDs) throws JSONException, IOException {
        for (int i = 1; i < attractionsGoogleIDs.size(); i++) {
            String current = attractionsGoogleIDs.get(i);
            int j = i - 1;
            while (j >= 0 && getRatingFromGoogle(attractionsGoogleIDs.get(j)) < getRatingFromGoogle(current)) {
                attractionsGoogleIDs.set(j + 1, attractionsGoogleIDs.get(j));
                j--;
            }
            attractionsGoogleIDs.set(j + 1, current);

        }

        return attractionsGoogleIDs;

    }

    /**
     * Filter A List of Attractions Based on Their Category
     * Since Category is not Provided By Google
     * Local attractionID is Used to Provide Such Information
     *
     * @param attractionIDs
     * @param category
     * @return
     */
    @GetMapping("/filterAttractionByCategory/{category}")
    public @ResponseBody List<AttractionsEntity> getAttractionByCategory(@RequestBody List<Integer> attractionIDs,
                                                                         @PathVariable("category") String category) {
        List<AttractionsEntity> filteredAttractions = attractionsService.filterAttractionByCategory(attractionIDs, category);
        return filteredAttractions;
    }

    /**
     * Filter A List of Attraction By WheelChair Accessibility
     * Attractions Represented By Google place_ID
     *
     * @param attracGoogleId
     * @param wc_allowed
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/filterAttractionByWheelChairAccessibility/{wc_allowed}")
    public @ResponseBody List<String> getAttractionByWheelChairAccessibility(
            @RequestBody List<String> attracGoogleId,
            @PathVariable("wc_allowed") Integer wc_allowed) throws JSONException, IOException {
        List<String> result = attractionsService.filterAttractionByWheelChairAccessibility(attracGoogleId, wc_allowed);
        return result;
    }

    /**
     * Sort A LIst of Attractions Base on Their Walking Distance
     * Attraction Represented By Google PlaceID To Fetch Attraction Coordinates
     *
     * @param attractionsGoogleIdList
     * @param departLat
     * @param departLng
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/sortAttractionByDistance/{departLat}/{departLng}")
    public @ResponseBody List<String> sortAttractionByDistance(@RequestBody List<String> attractionsGoogleIdList,
                                                               @PathVariable("departLat") double departLat,
                                                               @PathVariable("departLng") double departLng) throws JSONException, IOException {


        for (int i = 1; i < attractionsGoogleIdList.size(); i++) {
            String current = attractionsGoogleIdList.get(i);
            int j = i - 1;
            while (j >= 0 && Double.parseDouble(attractionsService.getWalkTime(departLat, departLng, attractionsService.getLatCoordByGoogleID(attractionsGoogleIdList.get(j)), attractionsService.getLngCoordByGoogleID(attractionsGoogleIdList.get(j)))) <
                    Double.parseDouble(attractionsService.getWalkTime(departLat, departLng, attractionsService.getLatCoordByGoogleID(current), attractionsService.getLngCoordByGoogleID(current)))
            ) {
                attractionsGoogleIdList.set(j + 1, attractionsGoogleIdList.get(j));
                j--;
            }
            attractionsGoogleIdList.set(j + 1, current);

        }

        return attractionsGoogleIdList;
    }

    /**
     * Sort Attraction Base On Their Popularity
     * Define Popularity As Number of Total Views For Attractions     *
     *
     * @param attractionsGoogleIdList
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/sortAttractionByPopularity/")
    public @ResponseBody List<String> sortAttractionByPopular(@RequestBody List<String> attractionsGoogleIdList) throws JSONException, IOException {
        for (int i = 1; i < attractionsGoogleIdList.size(); i++) {
            String current = attractionsGoogleIdList.get(i);
            int j = i - 1;
            while (j >= 0 && attractionsService.getTotalNumberOfRatingsByGoogleID(attractionsGoogleIdList.get(j))
                    <
                    attractionsService.getTotalNumberOfRatingsByGoogleID(current)) {
                attractionsGoogleIdList.set(j + 1, attractionsGoogleIdList.get(j));
                j--;
            }
            attractionsGoogleIdList.set(j + 1, current);

        }

        return attractionsGoogleIdList;
    }

    /**
     * Filter Attraction Which are Free to Enter
     * Attractions are Represented By
     *
     * @param attractionsEntityList
     * @return
     */
    @GetMapping("/filterAttractionByFreeEntry/")
    public @ResponseBody List<AttractionsEntity> getAttractionsByFreeEntry(
            @RequestBody List<AttractionsEntity> attractionsEntityList) {
        List<AttractionsEntity> filteredList = new ArrayList<>();
        for (AttractionsEntity a : attractionsEntityList) {
            if (a.getTicketPrice().doubleValue() == 0) {
                filteredList.add(a);
            }
        }
        return filteredList;
    }

    /**
     * Sort Attractions By the Ticket Price
     * From the Most to the Least
     *
     * @param attractionsEntityList
     * @return
     */
    @GetMapping("/sortAttractionByTicketPrice/")
    public @ResponseBody List<AttractionsEntity> sortAttractionByTicketPrice(
            @RequestBody List<AttractionsEntity> attractionsEntityList) {
        for (int i = 1; i < attractionsEntityList.size(); i++) {
            AttractionsEntity current = attractionsEntityList.get(i);
            int j = i - 1;
            while (j >= 0 && attractionsEntityList.get(j).getTicketPrice().doubleValue() < current.getTicketPrice().doubleValue()) {
                attractionsEntityList.set(j + 1, attractionsEntityList.get(j));
                j--;
            }
            attractionsEntityList.set(j + 1, current);

        }
        return attractionsEntityList;

    }

    /**
     * Fetch Attraction Google place_ID by Name
     * Pass in Attraction Name as String
     * This Method is for Testing Purpose, however, Not as Accurate.
     *
     * @param attractionName
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getAttractionGooglePlaceIDByName/{attractionName}")
    public @ResponseBody String getAttractionGooglePlaceIDByName(
            @PathVariable("attractionName") String attractionName)
            throws JSONException, IOException {
        String result = null;
        result = attractionsService.getGooglePlaceIDByName(attractionName);
        return result;
    }

    /**
     * Fetch place_ID by Address and Name
     * Both Address and Name are passed in as String
     * This is a Testing Method, A More Accurate Mwthod
     *
     * @param attractionName
     * @param attractionAddress
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getAttractionGooglePlaceIDByNameAndCoord/{attractionName}/{attractionAddress}")
    public @ResponseBody String getAttractionGooglePlaceIDByNameAndCoord(
            @PathVariable("attractionName") String attractionName,
            @PathVariable("attractionAddress") String attractionAddress)
            throws JSONException, IOException {
        return attractionsService.getGooglePlaceIDByCoordinateAndName(attractionName, attractionAddress);
    }

    /**
     * Fetch the Attractions' Accessibility For WheelChair
     * Attractions are Represented in place_ID
     * Return in Integer Format
     * 1=Allowed
     * 0= Not Allowed
     * -1 = Nop Specified
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getWC_AccessiilityFromGoogle/{attractionGoogleID}")
    public @ResponseBody int getWC_AccessiilityFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {

        return attractionsService.getWheelChair_AccessblityByGoogleID(googleID);
    }

    /**
     * Fetch Attraction Ratings from Google
     * Attractions are passed in as place_Id in String Format
     * Return a double
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getRatingFromGoogle/{attractionGoogleID}")
    public @ResponseBody double getRatingFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {

        return attractionsService.getRatingByGoogleID(googleID);
    }

    /**
     * Fetch Categories for Attraction from Google
     * Attractions are passed in as place_Id in String Format
     * Return Every Relevant Keywords Regarding a Place, in a Format of A List of Strings
     * Though the Method is Later Discarded as NO Relevant Information can Consistently Extracted
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getCategoryFromGoogle/{attractionGoogleID}")
    public @ResponseBody String getCategoryFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getCategoryByGoogleID(googleID);
    }

    /**
     * Fetch Address Information from Google
     * place_Id passed in as String
     * Return Address as String
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getAddressFromGoogle/{attractionGoogleID}")
    public @ResponseBody String getAddressFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getAddressByGoogleID(googleID);
    }

    /**
     * Fetch Phone Information from Google
     * place_Id passed in as String
     * Return Phone Number as String
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getPhoneFromGoogle/{attractionGoogleID}")
    public @ResponseBody String getPhoneFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getPhoneNumberByGoogleID(googleID);
    }

    /**
     * Fetch Offical Website Information from Google
     * place_Id passed in as String
     * Return a Webpage Link  as String
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getOfficalWebsiteFromGoogle/{attractionGoogleID}")
    public @ResponseBody String getOfficalWebsiteFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getOfficalWebsiteByGoogleID(googleID);
    }

    /**
     * Fetch Number of Review from Google
     * place_Id passed in as String
     * Return Number of Review as Integer
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/getNumberOfReviewsFromGoogle/{attractionGoogleID}")
    public @ResponseBody int getNumberOfReviewsFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getTotalNumberOfRatingsByGoogleID(googleID);
    }

    /**
     * Fetch Brief Description from Google
     * place_Id passed in as String
     * Return Brief Description as String
     *
     * @param googleID
     * @return
     * @throws JSONException
     * @throws IOException
     */

    @GetMapping("/getOverViewFromGoogle/{attractionGoogleID}")
    public @ResponseBody String getOverViewFromGoogle(@PathVariable("attractionGoogleID") String googleID)
            throws JSONException, IOException {
        return attractionsService.getOverViewByGoogleID(googleID);
    }

    /**
     * Fetch the Operation Hours From Google
     * Pass in place_Id as String
     * Return List of Hour Durations in String
     * "1000 - 1500"
     * "Closed"
     * "Open 24 Hour"
     *
     * @param attractionGoogleID
     * @return
     * @throws JSONException
     * @throws IOException
     */
    @GetMapping("/openingHoursForTheWeek/{attractionGoogleID}")
    public @ResponseBody List<String> getOpeningHoursThisWeek(
            @PathVariable("attractionGoogleID") String attractionGoogleID)
            throws JSONException, IOException {

        List<String> timeList;
        timeList = attractionsService.getOpeningHourMK2(attractionGoogleID);
        return timeList;
    }

    /**
     * Saving an Attraction
     * Save Signle Attraction
     */
    @PostMapping("/save")
    public Map<String, Boolean> saveAttractions(@RequestBody AttractionsEntity attractions) {
        boolean success = attractionsService.save(attractions);
        Map<String, Boolean> response = new HashMap<>();
        response.put("success", success);
        return response;
    }

    /**
     * Update an Attraction
     *
     * @param attractions
     * @return
     */
    @PutMapping("/update")
    public Map<String, Boolean> updateAttractions(@RequestBody AttractionsEntity attractions) {
        boolean success = attractionsService.updateById(attractions);
        Map<String, Boolean> response = new HashMap<>();
        response.put("success", success);
        return response;
    }

    /**
     * Delete an Attraction
     *
     * @param attractionsID
     * @return
     */
    @DeleteMapping("/delete/{attractionsID}")
    public Map<String, Boolean> deleteAttractions(@PathVariable Integer attractionsID) {
        boolean success = attractionsService.removeById(attractionsID);
        Map<String, Boolean> response = new HashMap<>();
        response.put("success", success);
        return response;
    }
}
